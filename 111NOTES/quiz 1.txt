QUIZ 1 - DOT NET
================

Components included: List, LINQ, Generics, encapsulation, indexer, exceptions.

Create new solution/project Quiz1Multi as Console/DotNet Framework application.

You will implement a program that repeatedly displays and handles options of the following menu items:

Menu:
1. Add Airport
2. List all airports
3. Find nearest airport by code (preferably using LINQ)
4. Find airport's elevation standard deviation (using LINQ)
5. Print Nth super-Fibonacci
6. Change log delegates
0. Exit
Enter your choice: 



Define the following class Airport.
- Add getters and setters with verification that throw InvalidDataException on failure.
- Add constructor that takes 5 parameters to initialize the 5 fields.
- Add constructor that takes 1 string parameter which is a line in file that it will parse and use to create Airport object.
- Add ToString implementation to display data in user-friendly manner.
- Add ToDataString implementation to save data to file as a single line semicolon-separated.

class Airport {
	Airport(string code, string city, double lat, double lng, int elevM) { ... }
	Airport(string line) { ... }
	string Code; // exactly 3 uppercase letters
	string City; // 1-50 characters, no semicolons
	double Latitude, Longitude; // -90 to 90, -180 to 180
	int elevationMeters; -1000 to 10000
	string ToString() { ... }
	string ToDataString() { ... }
}


Define custom exception InvalidDataException with one constructor that takes string as parameter - the message describing the problem.


Define class SuperFib that operates on long type with indexer.
Indexer only has a getter and it generates the Nth super-Fibonacci number.

Super-Fibonacci numbers are similar to Fibonacci numbers and are defined as follows:
N(index parameter) -> value returned
0 -> 0
1 -> 1
2 -> 1
3 -> 0+1+1 = 2
4 -> 1+1+2 = 4
5 -> 1+2+4 = 7
6... is the sum of the previous 3 numbers

For negative N throw InvalidDataException.

If algorithm causes numerical overflow handle the exception gracefully in a way that does not crash the program. Inform the user that number was too large to be generated.

LATER: turn your class into a generic class where type R is variable type and affects the type of super-Fibonacci numbers generated.
Try R to be int, long, decimal, BigInteger - make sure it works. You should be able to generate much larger super-Fibonacci numbers with BigInteger.

class SuperFib<R> { }


In the main class Program define:
- List<Airport> static field AirportsList
- delegate type LoggerDelegate that returns void and takes 1 parameter which is the message to be logged
- static field named Logger of LoggerDelegate type
- methods to read and write data to file @"..\..\data.txt":
static void ReadDataFromFile() { ... } // file not found is not an error
static void WriteDataToFile() { ... }
Data will be read once when program begins and written back once when program is about to finish.

- methods for logging
public static void LogToConsole(string) { ... }
public static void LogToFile(string) { ... }
Logging to file must prefix each line with time stamp in yyyy-mm-dd hh:mm:ss format.

Logger methods will write to @"..\..\events.log" file.

You should call Logger for each of the menu operations.

Initially Logger is null - no logging occurs.

For the distance between airports you are allowed to search web and copy an algorithm (method) that computes distance between two airports on a sphere using latitude/longitude. You may ignore elevation in this computation.

You must gracefully handle the case when there are no airports on the list or there is only one airport.
If user enters airport code that is not found you display an error message and go back to the menu.


Note: You are likely to need to add assembly references to your project for GeoCoordinate and BigInteger. If you don't these classes will show as not found despite valid using statements.


Example program session:


Data read from file.

1. Add Airport
2. List all airports
3. Find nearest airport by code
4. Find airport's elevation standard deviation
5. Print Nth super-Fibonacci
6. Change log delegates
0. Exit
Enter your choice: 1

Adding airport
Enter code: YUL
Enter city: Montreal
Enter latitude: 45.4659469
Enter longitude: 73.7497515
Enter elevation in meters: 37
Airport added.

1. Add Airport
2. List all airports
3. Find nearest airport by code
4. Find airport's elevation standard deviation
5. Print Nth super-Fibonacci
6. Change log delegates
0. Exit
Enter your choice: 2

YYZ in Toronto at 43.6777215 lat / 79.6270084 lng at 68m elevation
YUL in Montreal at 45.4659469 lat / 73.7497515 lng at 37m elevation

1. Add Airport
2. List all airports
3. Find nearest airport by code
4. Find airport's elevation standard deviation
5. Print Nth super-Fibonacci
6. Change log delegates
0. Exit
Enter your choice: 3

Enter airport code: YUL
Found nearest airport to be YYZ/Toronto distance is 487.34km

1. Add Airport
2. List all airports
3. Find nearest airport by code
4. Find airport's elevation standard deviation
5. Print Nth super-Fibonacci
6. Change log delegates
0. Exit
Enter your choice: 4

For all airports the standard deviation of their elevation is 12.34

1. Add Airport
2. List all airports
3. Find nearest airport by code
4. Find airport's elevation standard deviation
5. Print Nth super-Fibonacci
6. Change log delegates
0. Exit
Enter your choice: 5

Which Nth super-Fibonacci value would you like to see? 5
Value is: 7

1. Add Airport
2. List all airports
3. Find nearest airport by code
4. Find airport's elevation standard deviation
5. Print Nth super-Fibonacci
6. Change log delegates
0. Exit
Enter your choice: 6

Changing logging settings:
1-Logging to console
2-Logging to file
Enter your choices, comma-separated, empty for none: 1,2
Logging to console enabled
Logging to file enabled.

1. Add Airport
2. List all airports
3. Find nearest airport by code
4. Find airport's elevation standard deviation
5. Print Nth super-Fibonacci
6. Change log delegates
0. Exit
Enter your choice: 0

Data saved back to file.
Good bye.



NOTES:

To obtain full marks you are expected to follow best practices we've applied so far in class including but not limited to: identifier naming, task decomposition, error handling, etc.


WHAT TO SUBMIT:
1. Close Visual Studio to make sure all your code is saved to the hard drive.
2. ZIP-up the entire directory of your Solution/Project. Do NOT use any other compression software than ZIP. No RAR, TGZ, 7ZIP or others.

