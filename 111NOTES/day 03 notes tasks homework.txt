DAY 03 NOTES, TASKS, HOMEWORK

TASK 1 - Read about Delegates
======

https://www.tutorialsteacher.com/csharp/csharp-delegates


TASK 2 - Read about Nullable Types
======

https://www.tutorialsteacher.com/csharp/csharp-nullable-types


TASK 3 - Read about Creating Custom Exceptions
======

https://www.tutorialsteacher.com/csharp/custom-exception-csharp


TASK 4 - Read about Object Initializer
======

https://www.tutorialsteacher.com/csharp/csharp-object-initializer


TASK 5 - Read about Creating Generic Classes
======

https://www.tutorialsteacher.com/csharp/csharp-generics


TASK 6 - Read about Indexer
======

https://www.tutorialsteacher.com/csharp/csharp-indexer

TASK 7 - Read about Enumerations
======

https://www.tutorialsteacher.com/csharp/csharp-enum


HOMEWORK 1 - Data processing again
==================================


part 1 - initial structures
---------------------------

Create solution/project Day03PeopleAgain.

Add 3 classes and complete their code by adding getters/setters with verification, adding access modifiers, private fields and public constructors.

If setter verification fails you will throw a custom exception InvalidParameterException() that takes one parameter - message explaining the failed assignment.

You also will add two constructor to each class.
One that allows for initialization of all fields from parameters.
Second that takes one string (line from file) as parameter then parses it and assigns to appropriate properties. If parsing fails you throw InvalidParameterException() as well. No other exceptions should normally be thrown from this constructor.
You will use the second constructor when reading from file.

You will also define method with the following signature in each of 3 classes:

string ToDataString() {...}

That method will generate string of data as it is saved in file.

You will also implement ToString() method for each of 3 classes that displays all data of the object.

class Person {
	string Name; // 1-50 characters, no semicolons
	int Age; // 0-150
	Person(string dataLine) { ... }
	Person(string name, int age) { ... }
}

class Teacher : Person {
	string Subject; // 1-50 characters, no semicolons
	int YearsOfExperience; // 0-100
	Teacher(string dataLine) { ... }
	Teacher(string name, int age, string subject, int yoe) { ... }
}

class Student : Person {
	string Program; // 1-50 characters, no semicolons
	double GPA; // 0-4.3
	Student(string dataLine) { ... }
	Student(string name, int age, string program, double gpa) { ... }
}


part 2 - reading data in
------------------------

In the main directory of your project, using Notepad create file @"..\..\people.txt" with the following contents:

Person;Jerry;23
Teacher;Randy;66;PhysEd;33
Person;Timmy;44
Student;Mary;34;Nursing;3.8
Student;Martin;31;Math;4.0
Teacher;Larry;51;Physics;22

In the Main() method of your program write code that will read this file line by line and will instantiate the correct class and add it to List which is a field in Program class:

static List<Person> peopleList = new List<Person>();

If you encounter a line that does not conform to requirements then warn user, ignore it and continue to next line.

part 3 - processing
-------------------

Once all lines have been parsed and added to peopleList execute a for loop that will display all data for each element of the list using ToString(), for example:

Student Mary is 34 studying Nursing with GPA 4.1

You must use ToString() implementation in each class to provide string to display.


part 4 - stress-testing parsing
-------------------------------

Place several lines invalid in different ways in your input file to test your program. Make sure it skips all the invalid lines and does not crash.

Examples of invalid lines
Person;Jerry;;
Person;Jim;2342;
Car;BMW;55

Student;;;;


part 5 - more processing
------------------------

Add another 3 loops to Main method.
1. The first loop will print a list of only Students.

2. The second loop will print out a list of only Teachers.

Hint: use 'is' operator (similar to 'instanceof' you know from Java)

3. The third loop will print out a list of only Persons (but NOT Students and NOT Teachers!) - suggest you use GetType() and/or 'typeof' for comparison


part 6 - even more processing
-----------------------------

Make sure your input file contains at least 5 valid Student entries.

Compute and display the following information:

- average student's GPA
- median student's GPA
- standard deviation of student's GPA

Hint: Open this Wikipedia article and find section "Population standard deviation of grades of eight students" for how to compute standard deviation.
https://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values


part 7 - write back
-------------------

Using method ToDataString() on each item of peopleList write data to @"..\..\byname.txt" file. Lines of data must be SORTED by name of the person/teacher/student alphabetically. You must use LINQ to accomplish this.



part 8 - delegates
------------------

Define the following delegate type:

public void LogFailedSetterDelegate(string reason);

Define two static methods, one for logging errors to the screen, other to log errors into file - similar to what we did in class.

Define Program's class field of delegate type:

public static LogFailedSetterDelegate LogFailSet;

At the beginning of your program's Main method ask user the following question:

Where would you like to log setters errors?
1-screen only
2-screen and file
3-do not log
Your choice: 

Then, depending on the choice assign appropriate value to LogFailSet.
If user entered an invalid value then assume screen only.

Then, in every setter of each of the 3 classes call LogFailSet in case of setter value failure.

Test your solution.




