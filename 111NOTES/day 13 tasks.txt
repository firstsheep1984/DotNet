DAY 13
======

TASK 1 EF
---------

Create Text Console (DotNet Framework) project Day13CarsAndOwnersEF.

Add Entity Framework via NuGet.

Create DbContext class named ParkingDbContext.

Create two entities:

class Car { // table Cars
	int Id;
	string MakeModel; // up to 100 characters
	int YearOfProd;
	Owner Owner; // relation, may be null
}

class Owner { // table Owners
	int Id;
	string Name; // up to 100 characters
	ICollection<Car> CarsCollection; // relation
}

1. Figure out the difference between eager and lazy loading of related records in Entity Framework.
2. Find out how to turn it on and off.
3. Also find out how to load related records later if lazy loading was used.

Your main task will be to implement an application that has the following menu:

1. List all cars and their owner
2. List all owners and their cars
3. Add a car (no owner)
4. Add an owner (no cars)
5. Assign car to an owner (or no owner)
6. Delete an owner with all cars they own
0. Quit


HOMEWORK
========

TASK 2 EF - Trains and Passengers
---------------------------------

Create WPF (GUI) project Day13TravelsEF.

Add Entity Framework via NuGet.

Create DbContext class named TravelDbContext.

Create two entities and enumeration as follows:

class Passenger {
	int Id;
	string Name;
	Gender Gender;
	Train Train;
}

enum Gender { Male = 1, Female = 2, NA = 3 };

class Train {
	int Id;
	int Number; // train number
	DateTime Date; // date only, time is irrelevant
	ICollection<Passenger> PassengersCollection;
}


Your main task is to DESIGN AND IMPLEMENT a GUI application that will allow for the following operations:
* View list of trains
* For a specific train view a list of all passengers that travel on it
* Add a train
* View list of passengers with trains they travel on
* Add a passenger
* Assign passenger to travel on a train (or remove passanger from that train)
* Delete train and all passengers that are to be on that train.

NOTE: this is NOT a console application but a WPF/GUI application.

You will use Entity Framework to implement data storage for this application.

NOTE: If you can't figure out how to design and implement a WPF GUI for such an application then implement the project as a Console DotNet Framework application with a menu like we did in class previously.

